$date
	Mon Jan 23 21:33:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module programCounter_tb $end
$var wire 32 ! pc_value [31:0] $end
$var wire 32 " pc_alu [31:0] $end
$var parameter 32 # PERIOD $end
$var reg 32 $ alu_imm_pc_next [31:0] $end
$var reg 1 % clk $end
$var reg 32 & imm_offset [31:0] $end
$var reg 1 ' pc_alu_sel $end
$var reg 1 ( pc_next_sel $end
$var reg 1 ) reset_n $end
$scope module uut $end
$var wire 32 * alu_imm_pc_next [31:0] $end
$var wire 1 % clk $end
$var wire 32 + imm_offset [31:0] $end
$var wire 32 , pc_alu [31:0] $end
$var wire 1 ' pc_alu_sel $end
$var wire 1 ( pc_next_sel $end
$var wire 32 - pc_value [31:0] $end
$var wire 1 ) reset_n $end
$var reg 32 . dout [31:0] $end
$var reg 32 / offset [31:0] $end
$var reg 32 0 pc_alu_reg [31:0] $end
$var reg 32 1 pc_value_reg [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010 #
$end
#0
$dumpvars
bx 1
bx 0
bx /
b0 .
bx -
bx ,
b0 +
b0 *
0)
0(
0'
b0 &
0%
b0 $
bx "
bx !
$end
#5000
b0 !
b0 -
b0 1
1%
#10000
b100 "
b100 ,
b100 0
b100 .
b100 /
0%
1)
#15000
b1000 .
b1000 "
b1000 ,
b1000 0
b100 !
b100 -
b100 1
1%
#20000
0%
#25000
b1100 .
b1100 "
b1100 ,
b1100 0
b1000 !
b1000 -
b1000 1
1%
#30000
0%
#35000
b10000 .
b10000 "
b10000 ,
b10000 0
b1100 !
b1100 -
b1100 1
1%
#40000
0%
#45000
b10100 .
b10100 "
b10100 ,
b10100 0
b10000 !
b10000 -
b10000 1
1%
#50000
0%
#55000
b11000 .
b11000 "
b11000 ,
b11000 0
b10100 !
b10100 -
b10100 1
1%
#60000
0%
#65000
b11100 .
b11100 "
b11100 ,
b11100 0
b11000 !
b11000 -
b11000 1
1%
#70000
0%
#75000
b100000 .
b100000 "
b100000 ,
b100000 0
b11100 !
b11100 -
b11100 1
1%
#80000
0%
#85000
b100100 .
b100100 "
b100100 ,
b100100 0
b100000 !
b100000 -
b100000 1
1%
#90000
0%
#95000
b101000 .
b101000 "
b101000 ,
b101000 0
b100100 !
b100100 -
b100100 1
1%
#100000
0%
#105000
b101100 .
b101100 "
b101100 ,
b101100 0
b101000 !
b101000 -
b101000 1
1%
#110000
b11111111000000001111111100000000 .
0%
b11111111000000001111111100000000 $
b11111111000000001111111100000000 *
1(
#115000
b11111111000000001111111100000100 "
b11111111000000001111111100000100 ,
b11111111000000001111111100000100 0
b11111111000000001111111100000000 !
b11111111000000001111111100000000 -
b11111111000000001111111100000000 1
1%
#120000
b0 .
0%
0)
0(
#125000
b0 !
b0 -
b0 1
1%
#130000
b100 .
b100 "
b100 ,
b100 0
0%
1)
#135000
b1000 .
b1000 "
b1000 ,
b1000 0
b100 !
b100 -
b100 1
1%
#140000
0%
#145000
b1100 .
b1100 "
b1100 ,
b1100 0
b1000 !
b1000 -
b1000 1
1%
#150000
0%
#155000
b10000 .
b10000 "
b10000 ,
b10000 0
b1100 !
b1100 -
b1100 1
1%
#160000
0%
#165000
b10100 .
b10100 "
b10100 ,
b10100 0
b10000 !
b10000 -
b10000 1
1%
#170000
0%
#175000
b11000 .
b11000 "
b11000 ,
b11000 0
b10100 !
b10100 -
b10100 1
1%
#180000
0%
#185000
b11100 .
b11100 "
b11100 ,
b11100 0
b11000 !
b11000 -
b11000 1
1%
#190000
0%
#195000
b100000 .
b100000 "
b100000 ,
b100000 0
b11100 !
b11100 -
b11100 1
1%
#200000
0%
#205000
b100100 .
b100100 "
b100100 ,
b100100 0
b100000 !
b100000 -
b100000 1
1%
#210000
0%
#215000
b101000 .
b101000 "
b101000 ,
b101000 0
b100100 !
b100100 -
b100100 1
1%
#220000
0%
#225000
b101100 .
b101100 "
b101100 ,
b101100 0
b101000 !
b101000 -
b101000 1
1%
#230000
b110111000 .
b110111000 "
b110111000 ,
b110111000 0
b110010000 /
0%
b110010000 &
b110010000 +
1'
#235000
b1101001000 .
b1101001000 "
b1101001000 ,
b1101001000 0
b110111000 !
b110111000 -
b110111000 1
1%
#240000
0%
#245000
b10011011000 .
b10011011000 "
b10011011000 ,
b10011011000 0
b1101001000 !
b1101001000 -
b1101001000 1
1%
#250000
0%
#255000
b11001101000 .
b11001101000 "
b11001101000 ,
b11001101000 0
b10011011000 !
b10011011000 -
b10011011000 1
1%
#260000
0%
#265000
b11111111000 .
b11111111000 "
b11111111000 ,
b11111111000 0
b11001101000 !
b11001101000 -
b11001101000 1
1%
#270000
0%
